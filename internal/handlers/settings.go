package handlers

import (
	"context"
	"fmt"
	"log"
	"strconv"
	"strings"

	"github.com/SoulStalker/cognitask/internal/fsm"
	"github.com/SoulStalker/cognitask/internal/keyboards"
	"github.com/SoulStalker/cognitask/internal/messages"
	"github.com/SoulStalker/cognitask/internal/scheduler"
	"github.com/SoulStalker/cognitask/internal/usecase"
	tele "gopkg.in/telebot.v3"
)

type SettingsHandler struct {
	fsmService *fsm.FSMService
	service    usecase.SettingsService
	ctx        context.Context
	updateChan chan<- scheduler.ScheduleUpdate
}

func NewSettingsHandler(fsmService *fsm.FSMService, uc usecase.SettingsService, ctx context.Context, updateChan chan<- scheduler.ScheduleUpdate) *SettingsHandler {
	return &SettingsHandler{
		fsmService: fsmService,
		service:    uc,
		ctx:        ctx,
		updateChan: updateChan,
	}
}

func (h *SettingsHandler) CanHandle(state string) bool {
	return state == fsm.StateDeleteAfterDays ||
		state == fsm.StateNotificationHours ||
		state == fsm.StateNotifyFrom ||
		state == fsm.StateNotifyTo ||
		state == fsm.StateRandom
}

func (h *SettingsHandler) Handle(c tele.Context, data *fsm.FSMData) error {
	switch data.State {
	case fsm.StateDeleteAfterDays:
		return h.processDeleteDays(c)
	case fsm.StateNotificationHours:
		return h.processNotificationHours(c)
	case fsm.StateNotifyFrom:
		return h.processNotifyFrom(c)
	case fsm.StateNotifyTo:
		return h.processNotifyTo(c)
	case fsm.StateRandom:
		return h.processRandomHour(c)
	default:
		return c.Send("unknown callback")
	}
}

func (h *SettingsHandler) Settings(c tele.Context) error {
	err := c.Respond()
	if err != nil {
		return c.Edit(err.Error())
	}
	settings, err := h.service.All()
	if err != nil {
		return c.Edit(err.Error())
	}
	currentSettings := "‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n--------------------------\n\n"
	currentSettings += fmt.Sprintf("üóëÔ∏è –ê–≤—Ç–æ-—É–¥–∞–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ –¥–Ω–µ–π: %d\n\n", settings.DeleteAfterDays)
	currentSettings += fmt.Sprintf("‚è∞ –ü–µ—Ä–∏–æ–¥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—á–∞—Å–æ–≤): %d\n\n", settings.NotificationHours)
	currentSettings += fmt.Sprintf("üìÖ –ù–∞—á–∞–ª–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤: %d\n\n", settings.NotifyFrom)
	currentSettings += fmt.Sprintf("üìÖ –ö–æ–Ω–µ—Ü —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤: %d\n\n", settings.NotifyTo)
	currentSettings += fmt.Sprintf("üí° –ú–æ—Ç–∏–≤–∞—Ç–æ—Ä –≤: %d\n\n", settings.RandomHour)
	currentSettings += "–ú–æ–∂–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ:"

	return c.Edit(currentSettings, keyboards.CreateSettingsKeyboard())
}

func (h *SettingsHandler) SetDeleteDays(c tele.Context) error {
	return h.setState(c, fsm.StateDeleteAfterDays)
}

func (h *SettingsHandler) SetNotificationHours(c tele.Context) error {
	return h.setState(c, fsm.StateNotificationHours)
}

func (h *SettingsHandler) SetNotifyFrom(c tele.Context) error {
	return h.setState(c, fsm.StateNotifyFrom)
}

func (h *SettingsHandler) SetNotifyTo(c tele.Context) error {
	return h.setState(c, fsm.StateNotifyTo)
}

func (h *SettingsHandler) SetRandomHour(c tele.Context) error {
	return h.setState(c, fsm.StateRandom)
}

func (h *SettingsHandler) processDeleteDays(c tele.Context) error {
	rawDays := c.Callback().Data
	cleanDays := strings.Join(strings.Fields(rawDays), " ")
	deleteDays, err := strconv.Atoi(cleanDays)
	if err != nil {
		return c.Edit("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞: " + err.Error())
	}

	err = h.service.SetDeleteDays(uint(deleteDays))
	if err != nil {
		c.Edit("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: " + err.Error())
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
	h.sendScheduleUpdate(scheduler.UpdateDeleteSchedule)

	if err := h.fsmService.ClearState(h.ctx, c.Sender().ID); err != nil {
		log.Printf("Failed to clear state: %v", err)
	}

	return c.Edit(fmt.Sprintf("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ %s –¥–Ω–µ–π –¥–ª—è –∞–≤—Ç–æ-—É–¥–∞–ª–µ–Ω–∏—è", cleanDays), keyboards.CreateSettingsKeyboard())
}

func (h *SettingsHandler) processNotificationHours(c tele.Context) error {
	rawHours := c.Callback().Data
	cleanHours := strings.Join(strings.Fields(rawHours), " ")
	hours, err := strconv.Atoi(cleanHours)
	if err != nil {
		return c.Edit("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞: " + err.Error())
	}

	if hours < 1 || hours > 24 {
		return c.Edit("–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 24 —á–∞—Å–æ–≤")
	}

	err = h.service.SetNotificationHours(uint(hours))
	if err != nil {
		return c.Edit("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: " + err.Error())
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
	h.sendScheduleUpdate(scheduler.UpdateNotifications)

	if err := h.fsmService.ClearState(h.ctx, c.Sender().ID); err != nil {
		log.Printf("Failed to clear state: %v", err)
	}
	return c.Edit(fmt.Sprintf("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª %s —á–∞—Å–æ–≤", cleanHours), keyboards.CreateSettingsKeyboard())
}

func (h *SettingsHandler) processNotifyFrom(c tele.Context) error {
	rawHours := c.Callback().Data
	cleanHours := strings.Join(strings.Fields(rawHours), " ")
	hours, err := strconv.Atoi(cleanHours)
	if err != nil {
		return c.Edit("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞: " + err.Error())
	}

	if hours < 1 || hours > 24 {
		return c.Edit("–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 24 —á–∞—Å–æ–≤")
	}

	err = h.service.SetNotifyFrom(uint(hours))
	if err != nil {
		return c.Edit("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: " + err.Error())
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
	h.sendScheduleUpdate(scheduler.UpdateNotifications)

	if err := h.fsmService.ClearState(h.ctx, c.Sender().ID); err != nil {
		log.Printf("Failed to clear state: %v", err)
	}

	return c.Edit(fmt.Sprintf("‚úÖ –ù–∞—á–∞–ª–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ %s:00", cleanHours), keyboards.CreateSettingsKeyboard())
}

func (h *SettingsHandler) processNotifyTo(c tele.Context) error {
	rawHours := c.Callback().Data
	cleanHours := strings.Join(strings.Fields(rawHours), " ")
	hours, err := strconv.Atoi(cleanHours)
	if err != nil {
		return c.Edit("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞: " + err.Error())
	}

	if hours < 1 || hours > 24 {
		return c.Edit("–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 24 —á–∞—Å–æ–≤")
	}

	err = h.service.SetNotifyTo(uint(hours))
	if err != nil {
		return c.Edit("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: " + err.Error())
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
	h.sendScheduleUpdate(scheduler.UpdateNotifications)

	if err := h.fsmService.ClearState(h.ctx, c.Sender().ID); err != nil {
		log.Printf("Failed to clear state: %v", err)
	}

	return c.Edit(fmt.Sprintf("‚úÖ –ö–æ–Ω–µ—Ü —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ %s:00", cleanHours), keyboards.CreateSettingsKeyboard())
}

func (h *SettingsHandler) processRandomHour(c tele.Context) error {
	rawHour := c.Callback().Data
	cleanHour := strings.Join(strings.Fields(rawHour), " ")
	hours, err := strconv.Atoi(cleanHour)
	if err != nil {
		return c.Edit("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞: " + err.Error())
	}

	err = h.service.SetRandomHour(uint(hours))
	if err != nil {
		return c.Edit("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: " + err.Error())
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–µ–¥–∏–∞
	h.sendScheduleUpdate(scheduler.UpdateMediaSchedule)

	if err := h.fsmService.ClearState(h.ctx, c.Sender().ID); err != nil {
		log.Printf("Failed to clear state: %v", err)
	}

	return c.Edit(fmt.Sprintf("‚úÖ –ú–æ—Ç–∏–≤–∞—Ç–æ—Ä –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ %s:00", cleanHour), keyboards.CreateSettingsKeyboard())
}

func (h *SettingsHandler) setState(c tele.Context, newState string) error {
	err := c.Respond()
	if err != nil {
		return c.Edit(err.Error())
	}

	userID := c.Sender().ID
	if err := h.fsmService.ClearState(h.ctx, userID); err != nil {
		log.Printf("Failed to clear state: %v", err)
	}

	state := &fsm.FSMData{
		State: newState,
	}

	if err := h.fsmService.SetState(h.ctx, userID, state); err != nil {
		log.Printf("Failed to set state: %v", err)
		c.Edit(messages.BotMessages.ErrorSomeError)
	}
	return c.Edit("–í—ã–±–µ—Ä–∏ —á–∏—Å–ª–æ: ", keyboards.CreateHoursKeyboard(4))
}

// sendScheduleUpdate –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
func (h *SettingsHandler) sendScheduleUpdate(updateType scheduler.ScheduleUpdateType) {
	select {
	case h.updateChan <- scheduler.ScheduleUpdate{Type: updateType}:
		log.Printf("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %v", updateType)
	default:
		log.Printf("–ù–µ —É–¥–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: –ö–∞–Ω–∞–ª –∑–∞–±–∏—Ç")
	}
}
