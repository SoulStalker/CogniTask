package keyboards

import (
	"fmt"

	tele "gopkg.in/telebot.v3"
)

const (
	// –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
	BtnToday    = "üìÖ –°–µ–≥–æ–¥–Ω—è"
	BtnTomorrow = "üåÖ –ó–∞–≤—Ç—Ä–∞"
	BtnCalendar = "üóìÔ∏è –í—ã–±—Ä–∞—Ç—å"
	BtnSkipDate = "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
	// BtnCancel   = "üö´ –û—Ç–º–µ–Ω–∞"

)

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
var (
	BtnComplete  = &tele.InlineButton{Unique: "complete_task", Text: "‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å"}
	BtnDelete    = &tele.InlineButton{Unique: "delete_task", Text: "üóë –£–¥–∞–ª–∏—Ç—å"}
	BtnEditDate  = &tele.InlineButton{Unique: "edit_date", Text: "üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É"}
	BtnCancel    = &tele.InlineButton{Unique: "cancel", Text: "üö´ –û—Ç–º–µ–Ω–∞"}
	BtnAdd       = &tele.InlineButton{Unique: "add", Text: "–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞"}
	BtnSettings  = &tele.InlineButton{Unique: "settings", Text: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"}
	BtnPending   = &tele.InlineButton{Unique: "pending", Text: "–¢–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏"}
	BtnAll       = &tele.InlineButton{Unique: "all_tasks", Text: "–í—Å–µ –∑–∞–¥–∞—á–∏"}
	BtnRandomPic = &tele.InlineButton{Unique: "random_pic", Text: "üé≤ Random Pic"}
)

// GetDateSelectionKeyboard –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∑–∞–¥–∞—á–∏
func GetDateSelectionKeyboard() *tele.ReplyMarkup {
	kb := &tele.ReplyMarkup{
		ResizeKeyboard:  true,
		OneTimeKeyboard: true,
	}

	// –ö–Ω–æ–ø–∫–∏
	btnToday := kb.Text(BtnToday)
	btnTomorrow := kb.Text(BtnTomorrow)
	btnCalendar := kb.Text(BtnCalendar)
	btnSkip := kb.Text(BtnSkipDate)
	// BtnCancel := kb.Text(BtnCancel)

	// –†–∞—Å–∫–ª–∞–¥–∫–∞ –∫–Ω–æ–ø–æ–∫ —Ç—Ä–∏ —Ä—è–¥–∞: –°–µ–≥–æ–¥–Ω—è | –ó–∞–≤—Ç—Ä–∞, –í—ã–±—Ä–∞—Ç—å, –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å | –û—Ç–º–µ–Ω–∞
	kb.Reply(
		kb.Row(btnToday, btnTomorrow),
		kb.Row(btnCalendar),
		kb.Row(btnSkip),
	)

	return kb
}

// CreateMainKeyboard –æ—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
func CreateMainKeyboard() *tele.ReplyMarkup {
	kb := &tele.ReplyMarkup{
		// ResizeKeyboard:  true,
		// OneTimeKeyboard: true,
	}

	btnAdd := kb.Data(BtnAdd.Text, BtnAdd.Unique)
	btnSettings := kb.Data(BtnSettings.Text, BtnSettings.Unique)
	btnPending := kb.Data(BtnPending.Text, BtnPending.Unique)
	btnAll := kb.Data(BtnAll.Text, BtnAll.Unique)
	btnCancel := kb.Data(BtnCancel.Text, BtnCancel.Unique)

	kb.Inline(
		kb.Row(btnAdd, btnSettings),
		kb.Row(btnPending, btnAll),
		kb.Row(btnCancel),
	)

	return kb
}

// CreateTaskKeyboard –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–µ–π
func CreateTaskKeyboard(taskID uint) *tele.ReplyMarkup {
	kb := &tele.ReplyMarkup{}

	// Inline –∫–Ω–æ–ø–∫–∏ —Å callback data
	btnComplete := kb.Data(BtnComplete.Text, BtnComplete.Unique, fmt.Sprintf("%d", taskID))
	btnRandomPic := kb.Data(BtnRandomPic.Text, BtnRandomPic.Unique, "")
	btnDelete := kb.Data(BtnDelete.Text, BtnDelete.Unique, fmt.Sprintf("%d", taskID))
	btnEditDate := kb.Data(BtnEditDate.Text, BtnEditDate.Unique, fmt.Sprintf("%d", taskID))

	// –†–∞—Å–∫–ª–∞–¥–∫–∞
	kb.Inline(
		kb.Row(btnComplete),
		kb.Row(btnEditDate, btnDelete),
		kb.Row(btnRandomPic),
	)

	return kb
}

// CreateSettingsKeyboard —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
func CreateSettingsKeyboard() *tele.ReplyMarkup {
	markup := &tele.ReplyMarkup{}

	// –ö–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–∑–∞–≥–æ—Ç–æ–≤–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–≥–æ)
	btnNotifications := markup.Data("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "settings_notifications")
	btnAutoDelete := markup.Data("üóë –ê–≤—Ç–æ-—É–¥–∞–ª–µ–Ω–∏–µ", "settings_auto_delete")

	markup.Inline(
		markup.Row(btnNotifications),
		markup.Row(btnAutoDelete),
	)

	return markup
}
