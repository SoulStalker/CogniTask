package keyboards

import (
	"fmt"
	"time"

	tele "gopkg.in/telebot.v3"
)

const (
	// –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
	BtnToday    = "üìÖ –°–µ–≥–æ–¥–Ω—è"
	BtnTomorrow = "üåÖ –ó–∞–≤—Ç—Ä–∞"
	BtnCalendar = "üóìÔ∏è –í—ã–±—Ä–∞—Ç—å"
	BtnSkipDate = "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
	BtnCancel   = "üö´ –û—Ç–º–µ–Ω–∞"

	// –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏
	BtnComplete  = "‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å"
	BtnDelete    = "üóë –£–¥–∞–ª–∏—Ç—å"
	BtnEditDate  = "üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É"
	BtnRandomPic = "üé≤ Random Pic"
)

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
var (
	BtnCompleteTask = &tele.Btn{Unique: "complete_task"}
	BtnDeleteTask   = &tele.Btn{Unique: "delete_task"}
	BtnEditTaskDate = &tele.Btn{Unique: "edit_date"}
	BtnRandomPicM   = &tele.Btn{Unique: "random_pic"}
)

// GetDateSelectionKeyboard –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∑–∞–¥–∞—á–∏
func GetDateSelectionKeyboard() *tele.ReplyMarkup {
	kb := &tele.ReplyMarkup{
		ResizeKeyboard:  true,
		OneTimeKeyboard: true,
	}

	// –ö–Ω–æ–ø–∫–∏
	btnToday := kb.Text(BtnToday)
	btnTomorrow := kb.Text(BtnTomorrow)
	btnCalendar := kb.Text(BtnCalendar)
	btnSkip := kb.Text(BtnSkipDate)
	BtnCancel := kb.Text(BtnCancel)

	// –†–∞—Å–∫–ª–∞–¥–∫–∞ –∫–Ω–æ–ø–æ–∫ —Ç—Ä–∏ —Ä—è–¥–∞: –°–µ–≥–æ–¥–Ω—è | –ó–∞–≤—Ç—Ä–∞, –í—ã–±—Ä–∞—Ç—å, –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å | –û—Ç–º–µ–Ω–∞
	kb.Reply(
		kb.Row(btnToday, btnTomorrow),
		kb.Row(btnCalendar),
		kb.Row(btnSkip, BtnCancel),
	)

	return kb
}

// CreateTaskKeyboard –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–µ–π
func CreateTaskKeyboard(taskID uint) *tele.ReplyMarkup {
	kb := &tele.ReplyMarkup{}

	// Inline –∫–Ω–æ–ø–∫–∏ —Å callback data
	btnComplete := kb.Data(BtnComplete, BtnCompleteTask.Unique, fmt.Sprintf("%d", taskID))
	btnRandomPic := kb.Data(BtnRandomPic, BtnRandomPicM.Unique, "")
	btnDelete := kb.Data(BtnDelete, BtnDeleteTask.Unique, fmt.Sprintf("%d", taskID))
	btnEditDate := kb.Data(BtnEditDate, BtnEditTaskDate.Unique, fmt.Sprintf("%d", taskID))

	// –†–∞—Å–∫–ª–∞–¥–∫–∞
	kb.Inline(
		kb.Row(btnComplete),
		kb.Row(btnEditDate, btnDelete),
		kb.Row(btnRandomPic),
	)

	return kb
}

// CreateSettingsKeyboard —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
func CreateSettingsKeyboard() *tele.ReplyMarkup {
	markup := &tele.ReplyMarkup{}

	// –ö–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–∑–∞–≥–æ—Ç–æ–≤–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–≥–æ)
	btnNotifications := markup.Data("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "settings_notifications")
	btnAutoDelete := markup.Data("üóë –ê–≤—Ç–æ-—É–¥–∞–ª–µ–Ω–∏–µ", "settings_auto_delete")

	markup.Inline(
		markup.Row(btnNotifications),
		markup.Row(btnAutoDelete),
	)

	return markup
}

// GetRemoveKeyboard —É–¥–∞–ª—è–µ—Ç reply –∫–ª–∞–≤—É
func GetRemoveKeyboard() *tele.ReplyMarkup {
	return &tele.ReplyMarkup{
		RemoveKeyboard: true,
	}
}

func GetTodayDate() string {
	return time.Now().Format("2006-01-02")
}

func GetTomorrowDate() string {
	return time.Now().AddDate(0, 0, 1).Format("2006-01-02")
}

// todo –Ω–∞–¥–æ –ø–æ–¥—É–º–∞—Ç—å –º–æ–∂–µ—Ç –ª—É—á—à–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ü–∏—Ñ—Ä—É —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
// –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏
func ParseDate(dateStr string) (time.Time, error) {
	switch dateStr {
	case BtnToday:
		dateStr = GetTodayDate()
	case BtnTomorrow:
		dateStr = GetTomorrowDate()
	}

	// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
	formats := []string{
		"2006-01-02", // 2024-12-25
		"02.01.2006", // 25.12.2024
		"02/01/2006", // 25/12/2024
		"02-01-2006", // 25-12-2024
	}

	for _, format := range formats {
		if date, err := time.Parse(format, dateStr); err == nil {
			return date, nil
		}
	}

	return time.Time{}, fmt.Errorf("–Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: DD.MM.YYYY –∏–ª–∏ YYYY-MM-DD")
}
