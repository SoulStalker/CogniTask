package keyboards

import (
	"fmt"
	"strconv"
	"time"

	tele "gopkg.in/telebot.v3"
)

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
var (
	BtnCancel = &tele.InlineButton{Unique: "cancel", Text: "üö´ –û—Ç–º–µ–Ω–∞"}
	// –∫–Ω–æ–ø–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤—ã
	BtnSettings  = &tele.InlineButton{Unique: "settings", Text: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"}
	BtnPending   = &tele.InlineButton{Unique: "pending", Text: "–¢–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏"}
	BtnAll       = &tele.InlineButton{Unique: "all_tasks", Text: "–í—Å–µ –∑–∞–¥–∞—á–∏"}
	BtnRandomPic = &tele.InlineButton{Unique: "random_pic", Text: "üé≤ Random Pic"}

	// –∫–Ω–æ–ø–∫–∏ –∑–∞–¥–∞—á
	BtnComplete = &tele.InlineButton{Unique: "complete_task", Text: "‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å"}
	BtnDelete   = &tele.InlineButton{Unique: "delete_task", Text: "üóë –£–¥–∞–ª–∏—Ç—å"}
	BtnEditDate = &tele.InlineButton{Unique: "edit_date", Text: "üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É"}
	BtnAdd      = &tele.InlineButton{Unique: "add", Text: "–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞"}

	// –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
	BtnToday    = &tele.InlineButton{Unique: "today", Text: "üìÖ –°–µ–≥–æ–¥–Ω—è"}
	BtnTomorrow = &tele.InlineButton{Unique: "tomorrow", Text: "üåÖ –ó–∞–≤—Ç—Ä–∞"}
	BtnCalendar = &tele.InlineButton{Unique: "choose", Text: "üóìÔ∏è –í—ã–±—Ä–∞—Ç—å"}
	BtnSkipDate = &tele.InlineButton{Unique: "skip", Text: "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"}

	// –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
	BtnAutoDelete    = &tele.InlineButton{Unique: "setDeleteDays", Text: "üóëÔ∏è –ê–≤—Ç–æ‚Äë—É–¥–∞–ª–µ–Ω–∏–µ"}
	BtnNotifications = &tele.InlineButton{Unique: "setNotifications", Text: "‚è∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"}
	BtnNotifyFrom    = &tele.InlineButton{Unique: "setNotifyFrom", Text: "üìÖ –ù–∞—á–∞–ª–æ"}
	BtnNotifyTo      = &tele.InlineButton{Unique: "setNotifyTo", Text: "üìÖ –ö–æ–Ω–µ—Ü"}
	BtnRandomHour    = &tele.InlineButton{Unique: "setRandomHour", Text: "üí° –ú–æ—Ç–∏–≤–∞—Ü–∏—è"}
)

// GetDateSelectionKeyboard –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∑–∞–¥–∞—á–∏
func GetDateSelectionKeyboard() *tele.ReplyMarkup {
	kb := &tele.ReplyMarkup{}

	// –ö–Ω–æ–ø–∫–∏
	btnToday := kb.Data(BtnToday.Text, BtnToday.Unique)
	btnTomorrow := kb.Data(BtnTomorrow.Text, BtnTomorrow.Unique)
	btnCalendar := kb.Data(BtnCalendar.Text, BtnCalendar.Unique)
	btnSkip := kb.Data(BtnSkipDate.Text, BtnSkipDate.Unique)
	btnCancel := kb.Data(BtnCancel.Text, BtnCancel.Unique)

	// –†–∞—Å–∫–ª–∞–¥–∫–∞ –∫–Ω–æ–ø–æ–∫ —Ç—Ä–∏ —Ä—è–¥–∞: –°–µ–≥–æ–¥–Ω—è | –ó–∞–≤—Ç—Ä–∞, –í—ã–±—Ä–∞—Ç—å, –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å | –û—Ç–º–µ–Ω–∞
	kb.Inline(
		kb.Row(btnToday, btnTomorrow),
		kb.Row(btnCalendar, btnSkip),
		kb.Row(btnCancel),
	)

	return kb
}

// CreateMainKeyboard –æ—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
func CreateMainKeyboard() *tele.ReplyMarkup {
	kb := &tele.ReplyMarkup{
		// ResizeKeyboard:  true,
		// OneTimeKeyboard: true,
	}

	btnAdd := kb.Data(BtnAdd.Text, BtnAdd.Unique)
	btnSettings := kb.Data(BtnSettings.Text, BtnSettings.Unique)
	btnPending := kb.Data(BtnPending.Text, BtnPending.Unique)
	btnAll := kb.Data(BtnAll.Text, BtnAll.Unique)
	btnCancel := kb.Data(BtnCancel.Text, BtnCancel.Unique)

	kb.Inline(
		kb.Row(btnAdd, btnSettings),
		kb.Row(btnPending, btnAll),
		kb.Row(btnCancel),
	)

	return kb
}

// CreateTaskKeyboard –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–µ–π
func CreateTaskKeyboard(taskID uint) *tele.ReplyMarkup {
	kb := &tele.ReplyMarkup{}

	// Inline –∫–Ω–æ–ø–∫–∏ —Å callback data
	btnComplete := kb.Data(BtnComplete.Text, BtnComplete.Unique, fmt.Sprintf("%d", taskID))
	btnRandomPic := kb.Data(BtnRandomPic.Text, BtnRandomPic.Unique, "")
	btnDelete := kb.Data(BtnDelete.Text, BtnDelete.Unique, fmt.Sprintf("%d", taskID))
	btnEditDate := kb.Data(BtnEditDate.Text, BtnEditDate.Unique, fmt.Sprintf("%d", taskID))

	// –†–∞—Å–∫–ª–∞–¥–∫–∞
	kb.Inline(
		kb.Row(btnComplete),
		kb.Row(btnEditDate, btnDelete),
		kb.Row(btnRandomPic),
	)

	return kb
}

// CreateSettingsKeyboard —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
func CreateSettingsKeyboard() *tele.ReplyMarkup {
	kb := &tele.ReplyMarkup{}

	btnAutoDelete := kb.Data(BtnAutoDelete.Text, BtnAutoDelete.Unique)
	btnNotifications := kb.Data(BtnNotifications.Text, BtnNotifications.Unique)
	btnNotifyFrom := kb.Data(BtnNotifyFrom.Text, BtnNotifyFrom.Unique)
	btnNotifyTo := kb.Data(BtnNotifyTo.Text, BtnNotifyTo.Unique)
	btnRandomHour := kb.Data(BtnRandomHour.Text, BtnRandomHour.Unique)

	cancel := kb.Data(BtnCancel.Text, BtnCancel.Unique)

	kb.Inline(
		kb.Row(btnAutoDelete, btnNotifications),
		kb.Row(btnNotifyFrom, btnNotifyTo),
		kb.Row(btnRandomHour),
		kb.Row(cancel),
	)

	return kb
}

// CreateMainKeyboard –æ—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
func CreateCancelKeyboard() *tele.ReplyMarkup {
	kb := &tele.ReplyMarkup{}
	btnCancel := kb.Data(BtnCancel.Text, BtnCancel.Unique)
	kb.Inline(kb.Row(btnCancel))

	return kb
}

func CreateHoursKeyboard(rowsCount int) *tele.ReplyMarkup {
	kb := &tele.ReplyMarkup{}
	if rowsCount < 1 {
		rowsCount = 1
	}

	var btns []tele.Btn
	for i := 1; i <= 24; i++ {
		btns = append(btns, kb.Data(fmt.Sprint(i), fmt.Sprint(i)))
	}

	cancel := kb.Data(BtnCancel.Text, BtnCancel.Unique)

	perRow := (len(btns) + rowsCount - 1) / rowsCount
	rows := kb.Split(perRow, btns)

	rows = append(rows, kb.Row(cancel))

	kb.Inline(rows...)
	return kb
}

/* ---------- –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è ---------- */

func BuildKeyboard(year int, month time.Month) *tele.ReplyMarkup {
	const btnWidth = 7 // –ø–æ 7 –∫–Ω–æ–ø–æ–∫-–¥–Ω–µ–π –≤ —Å—Ç—Ä–æ–∫–µ

	loc := time.Local
	first := time.Date(year, month, 1, 0, 0, 0, 0, loc)
	daysInMonth := first.AddDate(0, 1, -1).Day()

	// –Ω–∞—Å–∫–æ–ª—å–∫–æ —Å–º–µ—Å—Ç–∏—Ç—å –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É (0 ‚Äì –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
	weekdayOffset := (int(first.Weekday()) + 6) % 7

	m := &tele.ReplyMarkup{}

	// –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (–ø—Ä–æ—à–ª—ã–π / —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü—ã)
	prev := first.AddDate(0, -1, 0)
	next := first.AddDate(0, +1, 0)

	btnPrev := m.Data("‚óÄÔ∏é", "nav_prev",
		fmt.Sprintf("NAV|%d|%d", prev.Year(), int(prev.Month())))
	btnNext := m.Data("‚ñ∂Ô∏é", "nav_next",
		fmt.Sprintf("NAV|%d|%d", next.Year(), int(next.Month())))

	// –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äì —Å—Ç—Ä–µ–ª–∫–∏
	m.Inline(m.Row(btnPrev, btnNext))

	// —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ ¬´—è—á–µ–π–∫–∏¬ª –º–µ—Å—è—Ü–∞
	cells := make([]tele.InlineButton, 0, weekdayOffset+daysInMonth)

	// –ø—É—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–æ 1-–≥–æ —á–∏—Å–ª–∞
	for i := 0; i < weekdayOffset; i++ {
		btn := m.Data(" ", "empty", "x")
		cells = append(cells, *btn.Inline())
	}
	// —Å–∞–º–∏ –¥–Ω–∏
	for d := 1; d <= daysInMonth; d++ {
		cb := fmt.Sprintf("DAY|%d|%02d|%02d", year, month, d)
		btn := m.Data(strconv.Itoa(d), "day", cb)
		cells = append(cells, *btn.Inline())
	}
	// –¥–æ–±–∏—Ç—å —Å—Ç—Ä–æ–∫—É –¥–æ –∫—Ä–∞—Ç–Ω–æ—Å—Ç–∏ 7, —á—Ç–æ–±—ã —Å–µ—Ç–∫–∞ –±—ã–ª–∞ —Ä–æ–≤–Ω–∞—è
	for len(cells)%btnWidth != 0 {
		btn := m.Data(" ", "empty", "x")
		cells = append(cells, *btn.Inline())
	}

	// —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 7 –∫–Ω–æ–ø–æ–∫
	for i := 0; i < len(cells); i += btnWidth {
		row := cells[i : i+btnWidth] // []InlineButton
		m.InlineKeyboard = append(m.InlineKeyboard, row)
	}
	return m
}
