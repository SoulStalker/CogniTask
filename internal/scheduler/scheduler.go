package scheduler

import (
	"fmt"
	"log"
	"time"

	"github.com/SoulStalker/cognitask/internal/usecase"
)

type Notifier struct {
	settings usecase.SettingsService
	ch       chan (time.Duration)
}

func NewNotifier(settings usecase.SettingsService, ch       chan (time.Duration)) *Notifier {
	return &Notifier{
		settings: settings,
		ch: ch,
	}
}

// TaskNotificationsScheduler -  –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø–æ –∫–∞–∂–¥—ã–π —É–∫–∞–∑–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —á–∞—Å–∞—Ö
func (n *Notifier) TaskNotificationsScheduler() {
	newInterval, err := n.settings.Interval()
	if err != nil {
		log.Println(err.Error())
	}
	ticker := time.NewTicker(time.Duration(newInterval) * time.Second)

	for {
		select {
		case <-ticker.C:
			fmt.Println("üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –í—Ä–µ–º—è:", time.Now())
		case interval := <-n.ch:
			fmt.Println("‚è± –ù–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª:", interval)
			ticker.Stop()
			ticker = time.NewTicker(interval)
		}
	}
}
